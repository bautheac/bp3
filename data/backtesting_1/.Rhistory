install.packages("TDA")
XX1 <- circleUnif(20)
XX2 <- circleUnif(20, r = 0.2)
DiagLim <- 5
maxdimension <- 1
Diag1 <- ripsDiag(XX1, maxdimension, DiagLim, printProgress = FALSE)
Diag2 <- ripsDiag(XX2, maxdimension, DiagLim, printProgress = FALSE)
bottleneckDist <- bottleneck(Diag1[["diagram"]], Diag2[["diagram"]],
dimension = 1)
print(bottleneckDist)
circleUnif
library("TDA")
version
XX1 <- circleUnif(20)
XX2 <- circleUnif(20, r = 0.2)
DiagLim <- 5
maxdimension <- 1
Diag1 <- ripsDiag(XX1, maxdimension, DiagLim, printProgress = FALSE)
Diag2 <- ripsDiag(XX2, maxdimension, DiagLim, printProgress = FALSE)
bottleneckDist <- bottleneck(Diag1[["diagram"]], Diag2[["diagram"]],
dimension = 1)
print(bottleneckDist)
XX1 <- circleUnif(20)
XX2 <- circleUnif(30, r = 0.2)
DiagLim <- 5
maxdimension <- 1
Diag1 <- ripsDiag(XX1, maxdimension, DiagLim, printProgress = FALSE)
Diag2 <- ripsDiag(XX2, maxdimension, DiagLim, printProgress = FALSE)
bottleneckDist <- bottleneck(Diag1[["diagram"]], Diag2[["diagram"]],
dimension = 1)
print(bottleneckDist)
XX1 <- circleUnif(20)
XX2 <- circleUnif(30, r = 0.2)
DiagLim <- 5
maxdimension <- 1
Diag1 <- ripsDiag(XX1, maxdimension, DiagLim, printProgress = FALSE)
Diag2 <- ripsDiag(XX2, maxdimension, DiagLim, printProgress = FALSE)
bottleneckDist <- bottleneck(Diag1[["diagram"]], Diag2[["diagram"]],
dimension = 0)
print(bottleneckDist)
XX3 <- sphereUnif(20)
?sphereUnif
XX3 <- sphereUnif(20,2)
XX1 <- circleUnif(20)
XX2 <- circleUnif(30, r = 0.2)
DiagLim <- 5
maxdimension <- 1
Diag1 <- ripsDiag(XX1, maxdimension, DiagLim, printProgress = FALSE)
Diag2 <- ripsDiag(XX3, maxdimension, DiagLim, printProgress = FALSE)
bottleneckDist <- bottleneck(Diag1[["diagram"]], Diag2[["diagram"]],
dimension = 0)
print(bottleneckDist)
?torusUnif
XX4 <- torusUnif(300)
XX4 <- torusUnif(300,a=1.8,c=5)
plot(XX4)
XX1 <- circleUnif(20)
XX2 <- circleUnif(30, r = 0.2)
DiagLim <- 5
maxdimension <- 1
Diag1 <- ripsDiag(XX1, maxdimension, DiagLim, printProgress = FALSE)
Diag2 <- ripsDiag(XX4, maxdimension, DiagLim, printProgress = FALSE)
bottleneckDist <- bottleneck(Diag1[["diagram"]], Diag2[["diagram"]],
dimension = 0)
print(bottleneckDist)
home
Home
Home()
home()
R.home
R.home()
R.home()
R.version
library("TDA")
install.packages("TDA")
library("TDA")
version
XX1 <- circleUnif(20)
XX2 <- circleUnif(20, r = 0.2)
XX1
n <- 400
XX <- circleUnif(n)
## Ranges of the grid
Xlim <- c(-1.8, 1.8)
Ylim <- c(-1.6, 1.6)
lim <- cbind(Xlim, Ylim)
by <- 0.05
h <- .3 #bandwidth for the function kde
#Kernel Density Diagram of the superlevel sets
Diag <- gridDiag(XX, kde, lim = lim, by = by, sublevel = FALSE,
printProgress = TRUE, h = h)
# confidence set
B <- 10 ## the number of bootstrap iterations should be higher!
## this is just an example
alpha <- 0.05
cc <- bootstrapDiagram(XX, kde, lim = lim, by = by, sublevel = FALSE, B = B,
alpha = alpha, dimension = 1, printProgress = TRUE, h = h)
plot(Diag[["diagram"]], band = 2 * cc)
plot(XX)
install.packages("TDA")
library("TDA")
version
XX1 <- circleUnif(20)
XX2 <- circleUnif(20, r = 0.2)
DiagLim <- 5
maxdimension <- 1
Diag1 <- ripsDiag(XX1, maxdimension, DiagLim, printProgress = FALSE)
Diag2 <- ripsDiag(XX2, maxdimension, DiagLim, printProgress = FALSE)
XX1
plot(XX1)
plot(XX2)
XX1 <- circleUnif(100)
plot(XX1)
XX2 <- circleUnif(100, r = 0.2)
plot(XX2)
Diag1 <- ripsDiag(XX1, maxdimension, DiagLim, printProgress = FALSE)
Diag2 <- ripsDiag(XX2, maxdimension, DiagLim, printProgress = FALSE)
bottleneckDist <- bottleneck(Diag1[["diagram"]], Diag2[["diagram"]],
dimension = 1)
print(bottleneckDist)
print(Diag1)
plot(Diag1)
shape(Diag1)
class(Diag1)
Diag1[0]
Diag1[0,0]
Diag1[1,1]
Diag1[1]
Diag$birth
Diag$Birth
XX4 <- torusUnif(300)
XX4 <- torusUnif(300,a=1.8,c=5)
plot(XX4)
library('quantmod')
library('TDA')
getSymbols('PEP',src='yahoo')
getSymbols('KO',src='yahoo')
PEP_2015 <- PEP['2015::2016']
KO_2015 <- KO['2015::2016']
ret_PEP <- as.matrix(dailyReturn(PEP_2015))
ret_KO <- as.matrix(dailyReturn(KO_2015))
maxdimension <- 0
maxscale <- 0.01
X <- cbind(ret_PEP, ret_KO)
dim(X)
plot(X)
install.packages("TDA")
library("TDA")
version
XX1 <- circleUnif(20)
XX2 <- circleUnif(20, r = 0.2)
DiagLim <- 5
maxdimension <- 1
Diag1 <- ripsDiag(XX1, maxdimension, DiagLim, printProgress = FALSE)
plot(Diag1)
library("TDA")
version
XX1 <- circleUnif(20)
XX2 <- circleUnif(20, r = 0.2)
DiagLim <- 5
maxdimension <- 1
Diag1 <- ripsDiag(XX1, maxdimension, DiagLim, printProgress = FALSE)
Diag2 <- ripsDiag(XX2, maxdimension, DiagLim, printProgress = FALSE)
plot(Diag1)
class(Diag1)
Diag1
plot(Diag1)
plot.diagram(Diag1)
plot.maxPersistence
plot
library("TDA")
XX4 <- torusUnif(300,a=1.8,c=5)
plot(XX4)
DiagLim <- 5
maxdimension <- 1
Diag2 <- ripsDiag(XX4, maxdimension, DiagLim, printProgress = FALSE)
plot(Diag2[["diagram"]], barcode = TRUE)
?torusUnif
torusUnif()
XX4 <- torusUnif(500,a=5,c=5)
plot(XX4)
XX4 <- torusUnif(500,a=1,c=5)
plot(XX4)
XX4 <- torusUnif(500,a=3,c=5)
plot(XX4)
XX4 <- torusUnif(500,a=3,c=10)
plot(XX4)
XX4 <- torusUnif(500,a=5,c=10)
plot(XX4)
Diag2 <- ripsDiag(XX4, maxdimension, DiagLim, printProgress = FALSE)
plot(Diag2[["diagram"]], barcode = TRUE)
XX4 <- torusUnif(100,a=5,c=10)
Diag2 <- ripsDiag(XX4, maxdimension, DiagLim, printProgress = FALSE)
plot(Diag2[["diagram"]], barcode = TRUE)
XX4 <- torusUnif(1000,a=1.8,c=5)
plot(XX4)
Diag2 <- ripsDiag(XX4, maxdimension, DiagLim, printProgress = FALSE)
plot(Diag2[["diagram"]], barcode = TRUE)
plot(Diag2[["diagram"]])
plot(Diag2[["diagram"]], barcode = TRUE)
XX4 <- torusUnif(1000,a=5,c=10)
plot(XX4)
DiagLim <- 10
Diag2 <- ripsDiag(XX4, maxdimension, DiagLim, printProgress = TRUE)
plot(Diag2[["diagram"]], barcode = TRUE)
plot(Diag2[["diagram"]])
XX4 <- torusUnif(100,a=5,c=10)
plot(XX4)
Diag2 <- ripsDiag(XX4, maxdimension, DiagLim, printProgress = TRUE)
plot(Diag2[["diagram"]], barcode = TRUE)
plot(Diag2[["diagram"]])
XX4 <- torusUnif(1000,a=5,c=10)
plot(XX4)
plot3D(XX4)
XX4
library("plot3D")
install.packages("plot3D")
library("plot3D")
plot3D(XX4)
scatter3D(XX4)
XX4
example(scatter3D)
XX4
XX4$1
XX4$
XX4
XX4[:,1]
XX4[,1]
scatter3D(XX4[,1],XX4[,2],XX4[,3])
surf3D(XX4[,1],XX4[,2],XX4[,3])
x <- as.matrix(XX4[,1])
y <- as.matrix(XX4[,2])
z <- as.matrix(XX4[,3])
surf3D(x,y,z)
surf3D(x,y,z,box=FALSE)
plot(Diag2[["diagram"]])
plot(XX4)
library("TDA")
version
DiagLim <- 5
XX4 <- torusUnif(1000,a=5,c=10)
plot(XX4)
source("https://bioconductor.org/biocLite.R")
source("https://bioconductor.org/biocLite.R")
source("https://bioconductor.org/biocLite.R")
library("quantmod")
getPrice(C)
getPrice("KO")
?getPrice
getSymbols('IBM',src='yahoo')
getSymbols('IBM',src='yahoo')
plot(IBM)
install.packages{"RQuantLib"}
install.packages("RQuantLib")
install.packages("xgboost")
library("TDA")
<- 300
n <- 300
X <- circleUnif(n)
by <- 0.065
Xseq <- seq(-1.6, 1.6, by = by)
Yseq <- seq(-1.7, 1.7, by = by)
Grid <- expand.grid(Xseq, Yseq)
Grid
plot(Grid)
by
m0 <- 0.1
DTM <- dtm(X, Grid, m0)
DTM
plot(X)
GenerateFeatureTDA <- function(folder_tr, folder_te, folder_va, folder_out){
#matrix_TDA_tr <- matrix(, nrow = 0, ncol = 6)
#matrix_TDA_tr <- matrix(, nrow = 0, ncol = 11)
matrix_TDA_tr <- matrix(, nrow = 0, ncol = 101)
#matrix_TDA_tr <- matrix(, nrow = 0, ncol = 201)
#colnames(matrix_TDA_tr) <- c('ticker','dim_0_KK_1','dim_0_KK_2','dim_0_KK_3','dim_0_KK_4','dim_0_KK_5')
#colnames(matrix_TDA_tr) <- c('ticker','norm_l1_KK_1','norm_l1_KK_2','norm_l1_KK_3','norm_l1_KK_4','norm_l1_KK_5',
#                             'norm_l2_KK_1','norm_l2_KK_2','norm_l2_KK_3','norm_l2_KK_4','norm_l2_KK_5')
n <- (length(list.files(folder_tr)) + length(list.files(folder_te)) + length(list.files(folder_va)))
t=1 # recording the number of TDA files processed
for(f in list.files(folder_tr)){
path = paste0(folder_tr,f)
#    print(path)
#    M = landscaper(path, t)
M = landscaperFULL(path, t)
matrix_TDA_tr = rbind(matrix_TDA_tr,M)
pct <- paste(round(100*t/n, 1), "%", sep="")
print(paste("progress =", pct))
t = t+1
}
file_out_tr <- paste0(folder_out,"TDA_features_tr.csv")
write.csv(matrix_TDA_tr,file_out_tr)
# TDA features for testing dataset
#matrix_TDA_te <- matrix(, nrow = 0, ncol = 6)
#matrix_TDA_te <- matrix(, nrow = 0, ncol = 11)
matrix_TDA_te <- matrix(, nrow = 0, ncol = 101)
#matrix_TDA_te <- matrix(, nrow = 0, ncol = 201)
#colnames(matrix_TDA_te) <- c('ticker','dim_0_KK_1','dim_0_KK_2','dim_0_KK_3','dim_0_KK_4','dim_0_KK_5')
#colnames(matrix_TDA_te) <- c('ticker','norm_l1_KK_1','norm_l1_KK_2','norm_l1_KK_3','norm_l1_KK_4','norm_l1_KK_5',
#                             'norm_l2_KK_1','norm_l2_KK_2','norm_l2_KK_3','norm_l2_KK_4','norm_l2_KK_5')
#t=1 # recording the number of TDA files processed
for(f in list.files(folder_te)){
path = paste0(folder_te,f)
#print(path)
#    M = landscaper(path, t)
M = landscaperFULL(path, t)
matrix_TDA_te = rbind(matrix_TDA_te,M)
pct <- paste(round(100*t/n, 1), "%", sep="")
print(paste("progress =", pct))
t = t+1
}
file_out_te <- paste0(folder_out,"TDA_features_te.csv")
write.csv(matrix_TDA_te,file_out_te)
# TDA features for validation dataset
#matrix_TDA_va <- matrix(, nrow = 0, ncol = 6)
#matrix_TDA_va <- matrix(, nrow = 0, ncol = 11)
matrix_TDA_va <- matrix(, nrow = 0, ncol = 101)
#matrix_TDA_va <- matrix(, nrow = 0, ncol = 201)
#colnames(matrix_TDA_va) <- c('ticker','dim_0_KK_1','dim_0_KK_2','dim_0_KK_3','dim_0_KK_4','dim_0_KK_5')
#colnames(matrix_TDA_va) <- c('ticker','norm_l1_KK_1','norm_l1_KK_2','norm_l1_KK_3','norm_l1_KK_4','norm_l1_KK_5',
#                             'norm_l2_KK_1','norm_l2_KK_2','norm_l2_KK_3','norm_l2_KK_4','norm_l2_KK_5')
#t=1 # recording the number of TDA files processed
for(f in list.files(folder_va)){
path = paste0(folder_va,f)
#print(path)
#    M = landscaper(path, t)
M = landscaperFULL(path, t)
matrix_TDA_va = rbind(matrix_TDA_va,M)
pct <- paste(round(100*t/n, 1), "%", sep="")
print(paste("progress =", pct))
t = t+1
}
file_out_va <- paste0(folder_out,"TDA_features_va.csv")
write.csv(matrix_TDA_va,file_out_va)
}
library(TDA)
folder_tr <- "/Users/tieqiangli/@bp3/data/i=1_TDA_L=52x10/TDA/tr/"
folder_tr <- "/Users/tieqiangli/@bp3/data/i=1_TDA_L=52x10/TDA/te/"
folder_tr <- "/Users/tieqiangli/@bp3/data/i=1_TDA_L=52x10/TDA/va/"
folder_out <- "/Users/tieqiangli/@bp3/data/i=1_TDA_L=52x10/TDA/"
GenerateFeatureTDA(folder_tr=folder_tr, folder_te=folder_te,folder_va = folder_va, folder_out = folder_out)
folder_tr <- "/Users/tieqiangli/@bp3/data/i=1_TDA_L=52x10/TDA/tr/"
folder_te <- "/Users/tieqiangli/@bp3/data/i=1_TDA_L=52x10/TDA/te/"
folder_va <- "/Users/tieqiangli/@bp3/data/i=1_TDA_L=52x10/TDA/va/"
GenerateFeatureTDA(folder_tr=folder_tr, folder_te=folder_te,folder_va = folder_va, folder_out = folder_out)
landscaperFULL <- function(file_in){
df <- read.csv(file_in)
num_row <- dim(df)[2]
#matrix_TDA_features <- matrix( ,nrow=num_row,ncol=6)
matrix_TDA_features <- matrix( ,nrow=num_row,ncol=101)
#matrix_TDA_features <- matrix( ,nrow=num_row,ncol=201)
matrix_TDA_features[,1] <- colnames(df)[1:num_row]
for(i in 1:num_row){
X <- df[colnames(df)[i]]
Diag <- gridDiag(FUNvalues = X,sublevel = FALSE, printProgress = FALSE)
#    Diag <- gridDiag(FUNvalues = X,sublevel = FALSE, printProgress = TRUE)
Lmin <- min(Diag[['diagram']][,2:3])
Lmax <- max(Diag[['diagram']][,2:3])
tseq <- seq(Lmin, Lmax, length = 50)
L2 <- landscape(Diag[["diagram"]],dimension = 0,KK=2, tseq = tseq)
matrix_TDA_features[i,2:51] = L2
L3 <- landscape(Diag[["diagram"]],dimension = 0,KK=3, tseq = tseq)
matrix_TDA_features[i,52:101] = L3
#L4 <- landscape(Diag[["diagram"]],dimension = 0,KK=3, tseq = tseq)
#matrix_TDA_features[i,102:151] = L4
#L5 <- landscape(Diag[["diagram"]],dimension = 0,KK=3, tseq = tseq)
#matrix_TDA_features[i,152:201] = L5
# pct <- paste(round(100*i/num_row, 1), "%", sep="")
# str1 = paste(t, "batch(es), progress =")
# print(paste(str1, pct))
}
return(matrix_TDA_features)
#  write.csv(matrix_TDA_features,f_out)
}
GenerateFeatureTDA(folder_tr=folder_tr, folder_te=folder_te,folder_va = folder_va, folder_out = folder_out)
GenerateFeatureTDA <- function(folder_tr, folder_te, folder_va, folder_out){
#matrix_TDA_tr <- matrix(, nrow = 0, ncol = 6)
#matrix_TDA_tr <- matrix(, nrow = 0, ncol = 11)
matrix_TDA_tr <- matrix(, nrow = 0, ncol = 101)
#matrix_TDA_tr <- matrix(, nrow = 0, ncol = 201)
#colnames(matrix_TDA_tr) <- c('ticker','dim_0_KK_1','dim_0_KK_2','dim_0_KK_3','dim_0_KK_4','dim_0_KK_5')
#colnames(matrix_TDA_tr) <- c('ticker','norm_l1_KK_1','norm_l1_KK_2','norm_l1_KK_3','norm_l1_KK_4','norm_l1_KK_5',
#                             'norm_l2_KK_1','norm_l2_KK_2','norm_l2_KK_3','norm_l2_KK_4','norm_l2_KK_5')
n <- (length(list.files(folder_tr)) + length(list.files(folder_te)) + length(list.files(folder_va)))
t=1 # recording the number of TDA files processed
for(f in list.files(folder_tr)){
path = paste0(folder_tr,f)
#    print(path)
#    M = landscaper(path, t)
#    M = landscaperFULL(path, t)
M = landscaperFULL(path)
matrix_TDA_tr = rbind(matrix_TDA_tr,M)
pct <- paste(round(100*t/n, 1), "%", sep="")
print(paste("progress =", pct))
t = t+1
}
file_out_tr <- paste0(folder_out,"TDA_features_tr.csv")
write.csv(matrix_TDA_tr,file_out_tr)
# TDA features for testing dataset
#matrix_TDA_te <- matrix(, nrow = 0, ncol = 6)
#matrix_TDA_te <- matrix(, nrow = 0, ncol = 11)
matrix_TDA_te <- matrix(, nrow = 0, ncol = 101)
#matrix_TDA_te <- matrix(, nrow = 0, ncol = 201)
#colnames(matrix_TDA_te) <- c('ticker','dim_0_KK_1','dim_0_KK_2','dim_0_KK_3','dim_0_KK_4','dim_0_KK_5')
#colnames(matrix_TDA_te) <- c('ticker','norm_l1_KK_1','norm_l1_KK_2','norm_l1_KK_3','norm_l1_KK_4','norm_l1_KK_5',
#                             'norm_l2_KK_1','norm_l2_KK_2','norm_l2_KK_3','norm_l2_KK_4','norm_l2_KK_5')
#t=1 # recording the number of TDA files processed
for(f in list.files(folder_te)){
path = paste0(folder_te,f)
#print(path)
#    M = landscaper(path, t)
#    M = landscaperFULL(path, t)
M = landscaperFULL(path)
matrix_TDA_te = rbind(matrix_TDA_te,M)
pct <- paste(round(100*t/n, 1), "%", sep="")
print(paste("progress =", pct))
t = t+1
}
file_out_te <- paste0(folder_out,"TDA_features_te.csv")
write.csv(matrix_TDA_te,file_out_te)
# TDA features for validation dataset
#matrix_TDA_va <- matrix(, nrow = 0, ncol = 6)
#matrix_TDA_va <- matrix(, nrow = 0, ncol = 11)
matrix_TDA_va <- matrix(, nrow = 0, ncol = 101)
#matrix_TDA_va <- matrix(, nrow = 0, ncol = 201)
#colnames(matrix_TDA_va) <- c('ticker','dim_0_KK_1','dim_0_KK_2','dim_0_KK_3','dim_0_KK_4','dim_0_KK_5')
#colnames(matrix_TDA_va) <- c('ticker','norm_l1_KK_1','norm_l1_KK_2','norm_l1_KK_3','norm_l1_KK_4','norm_l1_KK_5',
#                             'norm_l2_KK_1','norm_l2_KK_2','norm_l2_KK_3','norm_l2_KK_4','norm_l2_KK_5')
#t=1 # recording the number of TDA files processed
for(f in list.files(folder_va)){
path = paste0(folder_va,f)
#print(path)
#    M = landscaper(path, t)
#    M = landscaperFULL(path, t)
M = landscaperFULL(path)
matrix_TDA_va = rbind(matrix_TDA_va,M)
pct <- paste(round(100*t/n, 1), "%", sep="")
print(paste("progress =", pct))
t = t+1
}
file_out_va <- paste0(folder_out,"TDA_features_va.csv")
write.csv(matrix_TDA_va,file_out_va)
}
GenerateFeatureTDA(folder_tr=folder_tr, folder_te=folder_te,folder_va = folder_va, folder_out = folder_out)
setwd('/Users/tieqiangli/@bp3/data/backtesting_1/')
folder_tr <- "TDA/tr/"
folder_te <- "TDA/te/"
folder_va <- "TDA/va/"
folder_out <- "TDA/"
GenerateFeatureTDA(folder_tr=folder_tr, folder_te=folder_te,folder_va = folder_va, folder_out = folder_out)
